@page "/titlepage"
@rendermode InteractiveServer

<h3>File Upload</h3>

<div style="margin-bottom: 20px; display: flex;">
    <div>Select your file:</div>
    <InputFile OnChange="FileUploaded" />
</div>

@if (UploadedFiles.Count > 0)
{
    <h2>Uploaded Files</h2>
    <ul>
        @foreach (var file in UploadedFiles)
        {
            <li>
                <strong>@file.FileName</strong> - @file.FileSize.ToString("n0") bytes <br />
                Type: @file.FileType <br />
                Last modified: @file.LastModified <br />
                @if (!string.IsNullOrEmpty(file.ErrorMessage))
                {
                    <span style="color: red;">Error: @file.ErrorMessage</span>
                }
                <br />
                <button @onclick="() => ReadCsvFile(file)">Read CSV</button>
            </li>
        }
    </ul>
}

@if (CsvData.Count > 0)
{
    <h2>CSV Data (Rows: @CsvData.Count)</h2>
    <table border="1">
        <thead>
            <tr>
                @foreach (var header in CsvHeaders)
                {
                    <th>@header</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var row in CsvData)
            {
                <tr>
                    @foreach (var cell in row.Columns)
                    {
                        <td>@cell</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@if (readerEventsDictionary.Count > 0)
{
    <h2>Grouped Reader Events</h2>
    <ul>
        @foreach (var kvp in readerEventsDictionary)
        {
            <li>
                <strong>Reader ID: @kvp.Key</strong> (Events: @kvp.Value.Count)
                <ul>
                    @foreach (var readerEvent in kvp.Value)
                    {
                        <li>@string.Join(", ", readerEvent.Columns)</li>
                    }
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<UploadedFile> UploadedFiles { get; set; } = new List<UploadedFile>();
    private List<ReaderEvent> CsvData { get; set; } = new List<ReaderEvent>();
    private List<string> CsvHeaders { get; set; } = new List<string>();
    private Dictionary<string, List<ReaderEvent>> readerEventsDictionary = new();

    const int MAX_FILESIZE = 5000 * 1024; // 5 MB

    private async Task FileUploaded(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        if (browserFile != null)
        {
            try
            {
                var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);

                var randomFile = Path.GetTempFileName();
                var extension = Path.GetExtension(browserFile.Name);
                var targetFilePath = Path.ChangeExtension(randomFile, extension);

                using var destinationStream = new FileStream(targetFilePath, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);

                UploadedFiles.Add(new UploadedFile
                {
                    FileName = browserFile.Name,
                    FileSize = browserFile.Size,
                    FileType = browserFile.ContentType,
                    LastModified = browserFile.LastModified,
                    FilePath = targetFilePath
                });
            }
            catch (Exception exception)
            {
                UploadedFiles.Add(new UploadedFile
                {
                    FileName = "Error",
                    ErrorMessage = exception.Message
                });
            }
        }
    }

    private async Task ReadCsvFile(UploadedFile file)
    {
        CsvData.Clear();
        CsvHeaders.Clear();

        try
        {
            if (File.Exists(file.FilePath))
            {
                var lines = await File.ReadAllLinesAsync(file.FilePath);
                if (lines.Length > 0)
                {
                    CsvHeaders = lines[0].Split(',').ToList(); // Read headers

                    foreach (var line in lines.Skip(1)) // Skip header
                    {
                        var columns = line.Split(',').ToList();
                        
                        // Assuming DevID is column[0] and Machine is column[1]
                        if (columns.Count >= 2)
                        {
                            CsvData.Add(new ReaderEvent(columns[0], columns[1], columns));
                        }
                    }

                    // Process events into dictionary
                    readerEventsDictionary = ProcessReaderEvents(CsvData);
                }
            }
        }
        catch (Exception ex)
        {
            CsvData.Clear();
            CsvData.Add(new ReaderEvent("Error", "Error", new List<string> { $"Error reading file: {ex.Message}" }));
        }
    }

    private Dictionary<string, List<ReaderEvent>> ProcessReaderEvents(List<ReaderEvent> events)
    {
        var dictionary = new Dictionary<string, List<ReaderEvent>>();

        foreach (var readerEvent in events)
        {
            string readerID = readerEvent.ReaderID; // Unique identifier

            if (!dictionary.ContainsKey(readerID))
            {
                dictionary[readerID] = new List<ReaderEvent> { readerEvent };
            }
            else
            {
                dictionary[readerID].Add(readerEvent);
            }
        }

        return dictionary;
    }

    private class UploadedFile
    {
        public string FileName { get; set; } = "";
        public long FileSize { get; set; }
        public string FileType { get; set; } = "";
        public DateTimeOffset LastModified { get; set; }
        public string FilePath { get; set; } = "";
        public string ErrorMessage { get; set; } = "";
    }

    public class ReaderEvent
    {
        public string DevID { get; set; }
        public string Machine { get; set; }
        public List<string> Columns { get; set; } // Stores CSV row data

        public ReaderEvent(string devId, string machine, List<string> columns)
        {
            DevID = devId;
            Machine = machine;
            Columns = columns;
        }

        // Generates a unique Reader ID
        public string ReaderID => $"{DevID}-{Machine}";
    }
}
